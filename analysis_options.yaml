# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    always_declare_return_types: true
    always_use_package_imports: true                      # 强制使用包路径导入，统一导入格式
    library_private_types_in_public_api: false            # 允许在公共 API 中使用库私有类型
    prefer_const_constructors: true                       # 尽量使用 const 构造函数，优化性能
    always_specify_types: true                            # 始终指定类型，提升代码可读性和类型安全
    prefer_final_locals: true                             # 尽量使用 final 声明局部变量，提高变量的不可变性
    prefer_const_constructors_in_immutables: true         # 在不可变类中尽量使用 const 构造函数
    sort_child_properties_last: true                      # 将子元素属性放在最后，符合 Flutter 代码风格
    camel_case_types: true                                # 强制类型名使用驼峰命名，提高代码一致性
    non_constant_identifier_names: true                   # 避免使用非标准的标识符命名方式
    avoid_empty_else: true                                # 避免空的 else 分支，减少不必要的代码
    avoid_returning_this: true                            # 避免返回 this，减少链式调用的副作用
    avoid_shadowing_type_parameters: true                 # 避免类型参数遮蔽，防止类型名称冲突
    avoid_single_cascade_in_expression_statements: true   # 避免单级联表达式，保持代码风格一致
    exhaustive_cases: true                                # 确保 switch 语句中覆盖所有情况，减少潜在错误
    implementation_imports: true                          # 避免直接导入实现类，保持模块化结构
    only_throw_errors: true                               # 强制只抛出 Error 或 Exception 类型，规范异常处理
    parameter_assignments: true                           # 避免在函数中重新赋值参数，保持参数的不可变性
    recursive_getters: true                               # 避免递归 getter，防止无限递归问题
    sized_box_for_whitespace: true                        # 使用 SizedBox 代替空白容器，提升代码可读性
    tighten_type_of_initializing_formals: true            # 在构造函数中收紧初始化参数的类型
    unnecessary_getters_setters: true                     # 避免不必要的 getter 和 setter，提高代码简洁性
    unnecessary_null_in_if_null_operators: true           # 避免在 `??` 操作符中使用不必要的空值检查
    avoid_catches_without_on_clauses: false                # 捕获异常时建议使用 `on` 指定异常类型
    prefer_expression_function_bodies: false              # 简单方法使用表达式函数体
    prefer_single_quotes: true                            # 优先使用单引号
    constant_identifier_names: true                       # 常量标识符使用全大写
    require_trailing_commas: false                        # 多行列表和参数列表的最后添加逗号
    public_member_api_docs: false                         # 为公共 API 添加注释文档
    avoid_web_libraries_in_flutter: true                  # 避免在 Flutter 中使用 Web 特定的库
    avoid_print: true

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
